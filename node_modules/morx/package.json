{
  "_args": [
    [
      {
        "raw": "morx@0.0.5",
        "scope": null,
        "escapedName": "morx",
        "name": "morx",
        "rawSpec": "0.0.5",
        "spec": "0.0.5",
        "type": "version"
      },
      "C:\\uniserver\\www\\js projects\\ravepay-nodejs"
    ]
  ],
  "_from": "morx@0.0.5",
  "_id": "morx@0.0.5",
  "_inCache": true,
  "_location": "/morx",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/morx-0.0.5.tgz_1481207439196_0.1256822757422924"
  },
  "_npmUser": {
    "name": "4y0",
    "email": "ayodejsol@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "morx@0.0.5",
    "scope": null,
    "escapedName": "morx",
    "name": "morx",
    "rawSpec": "0.0.5",
    "spec": "0.0.5",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/morx/-/morx-0.0.5.tgz",
  "_shasum": "dc7a37c43ebdcbb3056fb6e9b64f9a4863bcdfc9",
  "_shrinkwrap": null,
  "_spec": "morx@0.0.5",
  "_where": "C:\\uniserver\\www\\js projects\\ravepay-nodejs",
  "author": {
    "name": "4y0"
  },
  "bugs": {
    "url": "https://github.com/4y0/morx/issues"
  },
  "dependencies": {
    "mosc": "1.0.0",
    "validator": "5.7.0"
  },
  "description": "Simple param extractor and validation util.",
  "devDependencies": {
    "chai": "3.5.0",
    "mocha": "3.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "dc7a37c43ebdcbb3056fb6e9b64f9a4863bcdfc9",
    "tarball": "https://registry.npmjs.org/morx/-/morx-0.0.5.tgz"
  },
  "gitHead": "0a31d831c6062aad0699a71df7a8f7491cab16d6",
  "homepage": "https://github.com/4y0/morx#readme",
  "keywords": [
    "validator",
    "validation",
    "api-spec",
    "morx"
  ],
  "license": "ISC",
  "main": "morx.js",
  "maintainers": [
    {
      "name": "4y0",
      "email": "ayodejsol@gmail.com"
    }
  ],
  "name": "morx",
  "optionalDependencies": {},
  "readme": "# MORX. A simple util for validation and parameter transformation\n\n## How to use\n\n### Install morx\n`npm install morx`\n\n### Basic Usage\n```\nvar morx = require('morx');\nvar spec = morx.spec() //Begin spec-ing parameters\n           .build('id', 'required:true, map:user_id')\n           .build('username', 'required:true')\n           .end(); //End parameter spec-ing\n\n//Call validation\nvar validated = morx.validate({id:23, username:'demio9009'}, spec);\nconsole.log(validated);\n/*\n{\n    no_errors:true,\n    error_messages:\"\",\n    params:{\n        'user_id':23,\n        'username':'demio9009'\n    },\n    excluded_params:{},\n    failed_params:[]\n}\n*/\n```\n\n### Using validators and filters\n```\nvar morx = require('morx');\nvar spec = morx.spec() //Begin spec-ing parameters\n           .build('id', 'required:true, validators:isInt, map:user_id')\n           .build('username', 'required:true, validators:isAlphanumeric.isAscii, filters:toUpper')\n           .end(); //End parameter spec-ing\n\n//Call validation\nvar validated = morx.validate({id:23, username:'demio9009'}, spec);\nconsole.log(validated);\n/*\n{\n    no_errors:true,\n    error_messages:\"\",\n    params:{\n        'user_id':23,\n        'username':'DEMIO9009'\n    },\n    failed_params:[]\n}\n*/\n```\n\n### Spec-ing with morx\n```\nspec = {\n    'paramTovalidate':ValidationExtractionAndTransformationRules\n}\n```\n`paramToValidate` - The key / name of the parameter to apply the ObjectValidationRequirements to. E.g. `id` , `username` e.t.c. If you passing an array as your Parameter source, valid values for `paramToValidate` include 0,1 e.t.c.\n\n`ValidationExtractionAndTransformationRules` - Key/value pair of a list of rules to use for validating, extracting and transforming `paramToValidate` as found in the parameter source. It has the following properties:\n\n* `required` : (boolean `True` or `False`) indicates whether or not `paramToValidate` is required. Internally morx checks to see if `paramToValidate` is `undefined` or `\"\"`\n* `map` : If present, indicates the key `paramToValidate` should be returned with. Without `map`, `id` will be returned as `id`. With map (`map:user_id`), `id` will be returned as `user_id` (see example under basic usage)\n* `validators`: A dot separated list of validators to apply to `paramToValidate`. Internally, morx uses the [validator](https://www.npmjs.com/package/validator) package on npm to validate parameter values. A list of supported validators can be found [here](https://www.npmjs.com/package/validator#validators). \n* `filters` : A dot separated list of filters / sanitizers to apply to `paramToValidate`. All filters with the exception of `toUpper` and `toLower` are the same as those provided by the validator package. A list can be found [here](https://www.npmjs.com/package/validator#sanitizers). \n* `not_param` : A boolean value indicated wether the `paramToValidate` should be returned as part of the extracted params. Useful for cases when a parm is required but not needed for functional operations. \n\nParameter specs can be created either using object literals or morx's inbuilt spec-er:\n```\nvar paramSpec = morx.spec() //Begin spec-ing parameters\n    .build('id', 'required:true, map:user_id')\n    .build('username', 'required:true')\n    .end(); //End parameter spec-ing\n/*\nparamSpec is the same as the object literal:\n{\n    id:{\n        required:true,\n        map:'user_id'\n    },\n    username:{\n        required:true,\n    }\n}\n*/\n```\n\n### validating with morx\n\nThe morx validator takes three arguments, the first two are required.  \n`var validated = morx.validate(ParameterSource, ParameterSpec, validationOptions)`\n\n* `ParameterSource` - The object / array source to validate the ParameterSpec against i.e The parameters defined in the spec will be looked up in the parameter source. In a function, the `arguments` array-like object is a valid parameter source. In a web app / api, the req.body, req.params, req.query objects are all valid parameter sources. (When using `arguments`, an interesting usecase could be to use the `map` spec property to transform arguments passed to a function into an object)\n* `ParameterSpec` - The spec definition with which to validate and extract values from the parameter source. See specing with morx for a more detailed explanation. The spec also precludes needless parameters from filtering into your apps. In cases of APIs / web projects where req.body / req.query could contain a number of properties, spec-ing ensures only what's needed by a function / service / endpoint is extracted\n* `ValidationOptions` - The options that define the way morx handles validation success or faliure. By default, morx will not fail until all parameters defined in the spec requirements have been checked - even if one of the requirements of a spec is not met. It will return all failed params as well as error messages. With `ValidationOptions` we can fine-tune this behavior. There are three main properties:\n    * `fail_on_first_error` - If this is set to true, morx will fail (i.e return to the calling function) at the first occurence of a validation error\n    * `throw_error` - If this is set to true, instead of returning a well formed object, morx will throw an error with the validation error messages\n    * `throw_error_on_first_fail` - Similar to `fail_on_first_error` but instead of returning, an error with the validation error message is thrown.\n\n### Auto-test generation with [morx-cha](https://www.npmjs.com/package/morx-cha)\n\nTo use morx with [morx-cha](https://www.npmjs.com/package/morx-cha), the additional spec properties are required\n\n* `eg` - Example value for the parameter\n* `eg_specialcase` - Example special case value for the parameter, e.g. eg_invalid_email or eg_exists e.t.c. _This is yet to be implemented_\n\nSee example [here](https://github.com/4y0/morxcha/tree/master/examples)\n\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/4y0/morx.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.0.5"
}
