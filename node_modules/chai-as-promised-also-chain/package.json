{
  "_args": [
    [
      {
        "raw": "chai-as-promised-also-chain@^1.0.2",
        "scope": null,
        "escapedName": "chai-as-promised-also-chain",
        "name": "chai-as-promised-also-chain",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "C:\\uniserver\\www\\js projects\\ravepay-nodejs"
    ]
  ],
  "_from": "chai-as-promised-also-chain@>=1.0.2 <2.0.0",
  "_id": "chai-as-promised-also-chain@1.0.2",
  "_inCache": true,
  "_location": "/chai-as-promised-also-chain",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/chai-as-promised-also-chain-1.0.2.tgz_1487096937507_0.0882978627923876"
  },
  "_npmUser": {
    "name": "greenlikeorange",
    "email": "ty@kny.co"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "chai-as-promised-also-chain@^1.0.2",
    "scope": null,
    "escapedName": "chai-as-promised-also-chain",
    "name": "chai-as-promised-also-chain",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/chai-as-promised-also-chain/-/chai-as-promised-also-chain-1.0.2.tgz",
  "_shasum": "6416a23b3f7384e6279c911ea804d67bfc62ef1c",
  "_shrinkwrap": null,
  "_spec": "chai-as-promised-also-chain@^1.0.2",
  "_where": "C:\\uniserver\\www\\js projects\\ravepay-nodejs",
  "author": {
    "name": "greenlikeorange",
    "email": "ty@kny.co"
  },
  "dependencies": {},
  "description": "Adding .also chain in base library of chai-as-promised",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "mocha": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6416a23b3f7384e6279c911ea804d67bfc62ef1c",
    "tarball": "https://registry.npmjs.org/chai-as-promised-also-chain/-/chai-as-promised-also-chain-1.0.2.tgz"
  },
  "gitHead": "b329669efe45643a98858eb03bd358a1b63fb85c",
  "keywords": [
    "chai",
    "chai-as-promised",
    "assertion",
    "chain",
    "also"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "greenlikeorange",
      "email": "ty@kny.co"
    }
  ],
  "name": "chai-as-promised-also-chain",
  "optionalDependencies": {},
  "readme": "<a href=\"http://promisesaplus.com/\">\n    <img src=\"https://promises-aplus.github.io/promises-spec/assets/logo-small.png\"\n         align=\"right\" valign=\"top\" alt=\"Promises/A+ logo\" />\n</a>\n\n# Chain-able Chai promised test case method\n\n\nInstead of manually writing many test cases for a promise\n\n```javascript\nreturn Promise.all([\n  doSomethingAsync().should.eventually.have.deep.property('foo'),\n  doSomethingAsync().should.eventually.have.deep.property('bar'),\n  doSomethingAsync().should.eventually.have.deep.property('foobar')\n])\n```\n\nyou can write code that expresses what you really mean:\n\n```javascript\nreturn doSomethingAsync().should\n  .eventually.have.deep.property('foo')\n  .also.have.deep.property('bar')\n  .also.have.deep.property('foobar')\n  .exec()\n```\n\nIn case `.also` is same as `.eventually` and `.to.eventually`, after all\nyou must call `.exec()` at the end of chain\n\n\n## Usage\n\n### Init test case\n\n```javascript\nvar chai = require('chai');\nvar chaiAsPromised = require('chai-as-promised')\nvar alsoChain = require('chai-as-promised-also-chain')\n\nchai.use(chaiAsPromised)\nchai.use(alsoChain)\n\nvar expect = chai.expect;\n\n// OR\n\nvar should = chai.should();\n```\n\n### `should`/`expect` Interface\n\n```javascript\nexpect(Promise.resolve({name: { first: 'maung', last: 'hla' }, age: 20}))\n  .to.eventually\n    .have.deep.property('name.first')\n      .that.equal('maung')\n  .also\n    .have.all.keys(['name', 'age'])\n  .exec()\n```\n\n```javascript\nPromise.resolve({name: { first: 'maung', last: 'hla' }, age: 20}))\n  .should.eventually\n    .have.deep.property('name.first')\n      .that.equal('maung')\n  .also\n    .have.all.keys(['name', 'age'])\n  .exec()\n```\n\n### `notify()` is overwrite and that method make assertions for all chain\n\n```javascript\npromise.should\n  .eventually.have.deep.property('name')\n  .also.contain.all.keys(['name', 'age'])\n  .notify(done) // this assertion is call for all promise in chain\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha test/*.js"
  },
  "version": "1.0.2"
}
